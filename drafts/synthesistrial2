import numpy as np
import pandas as pd
from scipy import stats
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta

class HospitalSimulation:
    def __init__(self, start_date="2025-01-01", end_date="2025-03-31"):
        """Initialize hospital simulation with improved parameters"""
        self.date_range = pd.date_range(start=start_date, end=end_date, freq="H")
        self.hospital_configs = {
            "Royal London": {
                "size": "large",
                "base_arrivals": 12,
                "bed_capacity": 120,
                "staff_day": 45,
                "staff_night": 30,
                "treatment_rooms": 25
            },
            "St Thomas": {
                "size": "large",
                "base_arrivals": 10,
                "bed_capacity": 100,
                "staff_day": 40,
                "staff_night": 25,
                "treatment_rooms": 20
            },
            "Manchester Royal": {
                "size": "large",
                "base_arrivals": 11,
                "bed_capacity": 110,
                "staff_day": 42,
                "staff_night": 28,
                "treatment_rooms": 22
            },
            "Queen Elizabeth": {
                "size": "medium",
                "base_arrivals": 8,
                "bed_capacity": 80,
                "staff_day": 35,
                "staff_night": 20,
                "treatment_rooms": 15
            },
            "Leeds General": {
                "size": "medium",
                "base_arrivals": 9,
                "bed_capacity": 90,
                "staff_day": 38,
                "staff_night": 22,
                "treatment_rooms": 18
            }
        }

    def generate_staff_schedule(self, num_hours, day_staff, night_staff):
        """Generate staff levels with shift patterns and handover periods"""
        schedule = np.zeros(num_hours)
        for i in range(0, num_hours, 24):
            # Day shift (8am-8pm)
            schedule[i+8:i+20] = day_staff
            # Night shift (8pm-8am)
            schedule[i+20:i+24] = night_staff
            if i+24 < num_hours:
                schedule[i+0:i+8] = night_staff
            # Handover periods (reduced staff)
            schedule[i+7:i+9] = 0.8 * schedule[i+7:i+9]  # Morning handover
            schedule[i+19:i+21] = 0.8 * schedule[i+19:i+21]  # Evening handover
        
        # Add random variation (sick days, etc.)
        variation = np.random.normal(1, 0.05, num_hours)
        return np.round(schedule * variation)

    def generate_treatment_times(self, severity_scores, staff_levels):
        """Generate treatment times based on severity and staff availability"""
        base_time = 30 + (severity_scores * 15)
        # Adjust treatment time based on staff availability
        staff_factor = np.clip(1 + (1 - staff_levels/np.mean(staff_levels)), 0.8, 1.5)
        adjusted_time = base_time * staff_factor
        return np.random.lognormal(np.log(adjusted_time), 0.3)

    def track_patient_flow(self, arrivals, treatment_times):
        """Track patient flow through the ED"""
        num_periods = len(arrivals)
        current_patients = np.zeros(num_periods)
        
        for t in range(num_periods):
            # Add new arrivals
            los = int(treatment_times[t])
            end_idx = min(t + los, num_periods)
            current_patients[t:end_idx] += arrivals[t]
        
        return current_patients

    def generate_hospital_data(self, hospital_id, config):
        """Generate synthetic data for a single hospital"""
        num_records = len(self.date_range)
        
        # Generate staff schedules
        staff_levels = self.generate_staff_schedule(
            num_records, 
            config['staff_day'],
            config['staff_night']
        )
        
        # Generate temporal patterns
        hour_of_day = self.date_range.hour
        day_of_week = self.date_range.dayofweek
        month = self.date_range.month
        
        # Base arrival patterns
        hourly_pattern = self.generate_hourly_pattern()
        weekly_pattern = self.generate_weekly_pattern()
        temporal_multiplier = (hourly_pattern[hour_of_day] * 
                             weekly_pattern[day_of_week])
        
        # Generate arrivals
        base_volume = np.random.normal(loc=1, scale=0.1, size=num_records)
        mean_arrivals = config["base_arrivals"] * temporal_multiplier * base_volume
        
        # Adjust for seasonal effects
        winter_months = [1, 2, 12]
        seasonal_factor = np.where(np.isin(month, winter_months), 1.2, 1.0)
        mean_arrivals *= seasonal_factor
        
        ambulance_arrivals = np.random.poisson(mean_arrivals)
        
        # Generate severity scores
        severity_scores = self.generate_severity_scores(hour_of_day, ambulance_arrivals)
        
        # Generate treatment times
        treatment_times = self.generate_treatment_times(severity_scores, staff_levels)
        
        # Track patient flow
        current_patients = self.track_patient_flow(ambulance_arrivals, treatment_times)
        
        # Calculate occupancy and waiting times
        occupancy = np.clip(current_patients / config["bed_capacity"], 0, 1)
        waiting_times = self.calculate_waiting_times(
            occupancy, staff_levels, severity_scores
        )
        
        # Create DataFrame
        df = pd.DataFrame({
            "Timestamp": self.date_range,
            "Hospital_ID": hospital_id,
            "Ambulance_Arrivals": ambulance_arrivals,
            "Patient_Waiting_Time_Minutes": waiting_times.astype(int),
            "A&E_Bed_Occupancy": occupancy,
            "Patient_Severity_Score": severity_scores,
            "Current_Patients": current_patients.astype(int),
            "Available_Beds": config["bed_capacity"],
            "Staff_Levels": staff_levels,
            "Treatment_Time_Minutes": treatment_times.astype(int),
            "Hour": hour_of_day,
            "DayOfWeek": day_of_week,
            "Month": month
        })
        
        return df

    def generate_severity_scores(self, hour_of_day, arrivals):
        """Generate severity scores with time-dependent distribution"""
        night_hours = (hour_of_day >= 22) | (hour_of_day <= 6)
        
        # Base severity distribution
        severity_base = np.random.choice(
            [1, 2, 3, 4, 5],
            size=len(arrivals),
            p=[0.1, 0.2, 0.4, 0.2, 0.1]
        )
        
        # Adjust for night hours (more severe cases at night)
        severity_scores = np.where(night_hours, 
                                 severity_base + 1,
                                 severity_base)
        
        return np.clip(severity_scores, 1, 5)

    def calculate_waiting_times(self, occupancy, staff_levels, severity_scores):
        """Calculate waiting times based on occupancy, staff, and severity"""
        base_waiting_time = 20 + (120 * occupancy)
        staff_factor = np.clip(1 + (1 - staff_levels/np.mean(staff_levels)), 0.8, 2.0)
        severity_factor = 1 / (severity_scores / 3)  # Higher severity = lower waiting time
        
        waiting_times = base_waiting_time * staff_factor * severity_factor
        waiting_time_noise = np.random.exponential(10, len(occupancy))
        
        return np.clip(waiting_times + waiting_time_noise, 0, 360)

    def generate_hourly_pattern(self):
        """Generate hourly arrival rate multipliers"""
        base_pattern = np.ones(24)
        morning_peak = stats.norm.pdf(np.arange(24), loc=12, scale=2)
        evening_peak = stats.norm.pdf(np.arange(24), loc=20, scale=2)
        
        hourly_pattern = base_pattern + 5 * (morning_peak + evening_peak)
        return hourly_pattern / np.mean(hourly_pattern)

    def generate_weekly_pattern(self):
        """Generate weekly arrival rate multipliers"""
        return np.array([1.0, 1.0, 1.0, 1.0, 1.1, 1.3, 1.2])

    def generate_full_dataset(self):
        """Generate data for all hospitals"""
        all_data = []
        for hospital_id, config in self.hospital_configs.items():
            hospital_data = self.generate_hospital_data(hospital_id, config)
            all_data.append(hospital_data)
        
        synthetic_data = pd.concat(all_data)
        return synthetic_data.sort_values(['Timestamp', 'Hospital_ID']).reset_index(drop=True)

class DataValidator:
    """Validation methods for synthetic hospital data"""
    
    @staticmethod
    def validate_distributions(synthetic_data, real_data, columns):
        """Perform KS tests for distribution matching"""
        results = {}
        for col in columns:
            statistic, pvalue = stats.ks_2samp(
                synthetic_data[col],
                real_data[col]
            )
            results[col] = {'statistic': statistic, 'pvalue': pvalue}
        return results

    @staticmethod
    def validate_temporal_patterns(synthetic_data, real_data, column):
        """Compare temporal patterns between synthetic and real data"""
        synthetic_hourly = synthetic_data.groupby('Hour')[column].mean()
        real_hourly = real_data.groupby('Hour')[column].mean()
        
        correlation = np.corrcoef(synthetic_hourly, real_hourly)[0, 1]
        return correlation

    @staticmethod
    def validate_hospital_metrics(synthetic_data):
        """Validate basic hospital metrics and constraints"""
        validations = {
            'occupancy_range': (synthetic_data['A&E_Bed_Occupancy'] <= 1.0).all(),
            'waiting_time_positive': (synthetic_data['Patient_Waiting_Time_Minutes'] >= 0).all(),
            'severity_range': synthetic_data['Patient_Severity_Score'].between(1, 5).all(),
            'patient_flow': (synthetic_data['Current_Patients'] <= 
                           synthetic_data['Available_Beds']).all()
        }
        return validations

class DataVisualizer:
    """Visualization methods for synthetic hospital data"""
    
    @staticmethod
    def plot_temporal_patterns(data, hospital_id=None):
        """Plot temporal patterns of key metrics"""
        if hospital_id:
            data = data[data['Hospital_ID'] == hospital_id]
        
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        
        # Hourly patterns
        sns.boxplot(data=data, x='Hour', y='Ambulance_Arrivals', ax=axes[0,0])
        axes[0,0].set_title('Hourly Arrival Patterns')
        
        # Weekly patterns
        sns.boxplot(data=data, x='DayOfWeek', y='A&E_Bed_Occupancy', ax=axes[0,1])
        axes[0,1].set_title('Weekly Occupancy Patterns')
        
        # Waiting time distribution
        sns.histplot(data=data, x='Patient_Waiting_Time_Minutes', ax=axes[1,0])
        axes[1,0].set_title('Waiting Time Distribution')
        
        # Severity score distribution
        sns.countplot(data=data, x='Patient_Severity_Score', ax=axes[1,1])
        axes[1,1].set_title('Severity Score Distribution')
        
        plt.tight_layout()
        return fig

    @staticmethod
    def plot_hospital_comparisons(data):
        """Plot comparisons between hospitals"""
        fig, axes = plt.subplots(2, 1, figsize=(15, 12))
        
        # Average occupancy by hospital
        sns.boxplot(data=data, x='Hospital_ID', y='A&E_Bed_Occupancy', ax=axes[0])
        axes[0].set_title('Occupancy Rates by Hospital')
        
        # Average waiting times by hospital
        sns.boxplot(data=data, x='Hospital_ID', y='Patient_Waiting_Time_Minutes', ax=axes[1])
        axes[1].set_title('Waiting Times by Hospital')
        
        plt.tight_layout()
        return fig

# Usage example
if __name__ == "__main__":
    # Generate synthetic data
    simulator = HospitalSimulation()
    synthetic_data = simulator.generate_full_dataset()
    
    # Save the data
    synthetic_data.to_csv("enhanced_synthetic_hospital_data.csv", index=False)
    
    # Create visualizations
    visualizer = DataVisualizer()
    temporal_fig = visualizer.plot_temporal_patterns(synthetic_data)
    comparison_fig = visualizer.plot_hospital_comparisons(synthetic_data)
    
    # Validate the data
    validator = DataValidator()
    validation_results = validator.validate_hospital_metrics(synthetic_data)
    print("Validation Results:", validation_results)